#pragma once
#include <iostream>
#include <windows.h>
using namespace std;
using namespace System;

const int filas = 45;
const int columnas = 120;

int mapa1[45][120] = {
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	12,	10,	10,	2,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	5,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	2,	10,	10,	10,	2,	5,	10,	10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	5,	2,	10,	2,	10,	10,	10,	2,	10,	10,	10,	2,	12,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10,	10,	2,	5,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	12,	10,	10,	2,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	2,	10,	2,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	2,	2,	2,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	2,	10,	2,	6,	2,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	6,	2,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	6,	6,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	12,	10,	10,	2,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	6,	6,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	12,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	6,	6,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	2,	10,	10,	12,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	6,	6,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	6,	6,	6,	6,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	2,	5,	10,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	6,	6,	6,	6,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	6,	6,	6,	6,	6,	6,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	6,	6,	6,	6,	6,	6,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	2,	5,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	12,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	2,	5,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	5,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	5,	2,	10,	2,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	12,	10,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	12,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	2,	10,	10,	10,	2,	10,	10,	2,	10,	10,	10	}	,
{	10,	10,	2,	10,	10,	10,	2,	5,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	2,	5,	10,	10,	2,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	12,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	2,	10,	10,	10,	2	}	,
{	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	12,	2,	10,	2,	10	}	,
{	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	2,	5,	10,	10,	2,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	2,	5,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	12,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	5,	2,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	2,	10,	10,	12,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	2,	10,	2,	12,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	2,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}	,
{	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	11,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10,	10	}

};


class Mapa {
public:
    Mapa(const int mapa[filas][columnas]) {
        
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                matriz[i][j] = mapa[i][j];
            }
        }
    }

    void Dibujar() {
        Console::CursorVisible = false;
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                Console::BackgroundColor = obtenerColor(matriz[i][j]);
                cout << "  "; 
            }
            Console::BackgroundColor = ConsoleColor::Black;
            cout << endl;
        }
        Console::ResetColor();
    }

 
    void genera_mapa() {
        for (int f = 0; f < filas; f++) {
            for (int c = 0; c < columnas; c++) {
                cursor(c, f);
                color(matriz[f][c]);
                cout << char(219); 
            }
        }
    }

    
    static void cursor(int x, int y) {
        Console::SetCursorPosition(x, y);
    }

    static void color(int c) {
        switch (c) {
        case 0: Console::ForegroundColor = ConsoleColor::Black; break;
        case 1: Console::ForegroundColor = ConsoleColor::DarkBlue; break;
        case 2: Console::ForegroundColor = ConsoleColor::DarkGreen; break;
        case 3: Console::ForegroundColor = ConsoleColor::DarkCyan; break;
        case 4: Console::ForegroundColor = ConsoleColor::DarkRed; break;
        case 5: Console::ForegroundColor = ConsoleColor::DarkMagenta; break;
        case 6: Console::ForegroundColor = ConsoleColor::DarkYellow; break;
        case 7: Console::ForegroundColor = ConsoleColor::Gray; break;
        case 8: Console::ForegroundColor = ConsoleColor::DarkGray; break;
        case 9: Console::ForegroundColor = ConsoleColor::Blue; break;
        case 10: Console::ForegroundColor = ConsoleColor::Green; break;
        case 11: Console::ForegroundColor = ConsoleColor::Cyan; break;
        case 12: Console::ForegroundColor = ConsoleColor::Red; break;
        case 13: Console::ForegroundColor = ConsoleColor::Magenta; break;
        case 14: Console::ForegroundColor = ConsoleColor::Yellow; break;
        case 15: Console::ForegroundColor = ConsoleColor::White; break;
        }
    }

private:
    int matriz[filas][columnas];

    ConsoleColor obtenerColor(int valor) {
        switch (valor) {
        case 0: return ConsoleColor::Black;
        case 1: return ConsoleColor::DarkBlue;
        case 2: return ConsoleColor::DarkGreen;
        case 3: return ConsoleColor::DarkCyan;
        case 4: return ConsoleColor::DarkRed;
        case 5: return ConsoleColor::DarkMagenta;
        case 6: return ConsoleColor::DarkYellow;
        case 7: return ConsoleColor::Gray;
        case 8: return ConsoleColor::DarkGray;
        case 9: return ConsoleColor::Blue;
        case 10: return ConsoleColor::Green;
        case 11: return ConsoleColor::Cyan;
        case 12: return ConsoleColor::Red;
        case 13: return ConsoleColor::Magenta;
        case 14: return ConsoleColor::Yellow;
        case 15: return ConsoleColor::White;
        default: return ConsoleColor::Black;
        }
    }
};




